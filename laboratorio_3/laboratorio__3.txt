Este es el laboratorio 3
¬°Sincronizando clientes!
Introducci√≥n
Seguro que alguna vez haz intentado comprar entradas para alg√∫n evento (un partido de f√∫tbol, un concierto, etc.). Normalmente, al iniciar el proceso de compra online, quedas en una cola virtual hasta que puedes acceder a la tienda, donde esperas hasta completar la compra. En este primer laboratorio, implementar√°s la simulaci√≥n de una tienda de venta de entradas.
________________________________________
Escenario
Dispones de un proyecto en C++ con al menos dos ficheros:
‚Ä¢	main.cpp (ya implementado, no puedes modificarlo).
‚Ä¢	tienda_tickets.cpp (archivo donde deber√°s a√±adir toda la l√≥gica de concurrencia).
Adem√°s, hay un fichero JSON llamado clientes.json con informaci√≥n sobre los clientes que quieren comprar. Su estructura es:
[
  {
    "nombre": "Pedro",
    "numeroTickets": 2,
    "tiempoEnTienda": 0.4,
    "retrasoIngreso": 0.0,
    "VIP": false
  },
  ...
]
‚Ä¢	nombre: nombre del cliente.
‚Ä¢	numeroTickets: n√∫mero de entradas a comprar.
‚Ä¢	tiempoEnTienda: segundos que permanece en la tienda antes de comprar.
‚Ä¢	retrasoIngreso: segundos de espera antes de entrar (desde el inicio del programa).
‚Ä¢	VIP: si es cliente VIP o no.
________________________________________
El main.cpp acepta dos argumentos de l√≠nea de comandos: el precio de la entrada (double) y la capacidad m√°xima de la tienda (int). Ejemplo:
./main 50.2 3
g++ -pthread -std=c++20 main.cpp tienda_tickets.cpp -o main
Significa que cada entrada vale 50.2 unidades monetarias y como m√°ximo pueden estar 3 clientes dentro simult√°neamente.
________________________________________
Firma de la funci√≥n (no modificable):
double simular_tienda(const std::vector<Cliente>& clientes,
                      double precio_ticket,
                      int capacidad_maxima,
                      int n_vips);
‚Ä¢	clientes: vector de diccionarios parseados desde JSON.
‚Ä¢	precio_ticket: precio de la entrada.
‚Ä¢	capacidad_maxima: capacidad m√°xima simult√°nea.
‚Ä¢	n_vips: n√∫mero total de clientes VIP.
‚Ä¢	Devuelve las ganancias finales de la tienda.
________________________________________
Funci√≥n adicional
double get_segundos_transcurridos();
Devuelve los segundos transcurridos (con una decimal) desde el inicio del programa. Util√≠zala para registrar tiempos en tu c√≥digo.
________________________________________
Comportamiento de cada cliente
Cada cliente es un std::thread cuyo nombre ser√° el del cliente. Pasos:
1.	Esperar retrasoIngreso segundos (std::this_thread::sleep_for).
2.	Entrar en la tienda (regi√≥n cr√≠tica) ‚Äî respetando la capacidad m√°xima y dando prioridad a VIPs.
3.	Permanecer dentro tiempoEnTienda segundos.
4.	Comprar numeroTickets entradas: incrementar las ganancias en precio_ticket * numeroTickets.
5.	Salir de la tienda (liberar la plaza).
Cada vez que un cliente entra o sale, imprimir exactamente:
<segundos>s: <nombre> <acci√≥n>
‚Ä¢	<segundos>: valor devuelto por get_segundos_transcurridos().
‚Ä¢	<acci√≥n>: "entrando" o "saliendo".
No pueden mostrarse otros mensajes.
________________________________________
Clientes VIP
‚Ä¢	Los clientes VIP deben poder entrar antes que los no VIP (respetando su retrasoIngreso).
‚Ä¢	Ning√∫n cliente ‚Äúnormal‚Äù puede entrar mientras haya alg√∫n VIP dentro.
________________________________________
Requisitos
‚Ä¢	Entregable: un √∫nico fichero C++ (ticket_store.cpp).
‚Ä¢	No importar ni modificar main.cpp.
‚Ä¢	No cambiar la firma de simular_tienda.
‚Ä¢	Cada cliente = un std::thread.
‚Ä¢	No crear hilos adicionales aparte de los clientes.
‚Ä¢	Usar mecanismos de sincronizaci√≥n de C++ (std::mutex, std::condition_variable, sem√°foros, etc.).
‚Ä¢	No debe haber ‚Äúbusy waits‚Äù.
‚Ä¢	Implementar la l√≥gica de capacidad (hasta capacidad_maxima clientes dentro).
‚Ä¢	Respetar prioridad y exclusi√≥n de clientes VIP.
‚Ä¢	Mostrar √∫nicamente los mensajes de entrada/salida indicados.
________________________________________
Comprobad que al finalizar simular_tienda retorna el total de ganancias calculado. Devolver un valor err√≥neo provocar√° error en el programa.
¬°Feliz programaci√≥n! ü§°
